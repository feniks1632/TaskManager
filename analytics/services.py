from datetime import timedelta

from django.db.models import Case, Count, IntegerField, When
from django.db.models.functions import TruncDate
from django.utils import timezone

from tasks.models import Task


class AnalyticsService:
    def __init__(self, user):
        self.user = user

    def get_stats(self):

        now = timezone.now()

        stats = Task.objects.filter(assignee=self.user).aggregate(
            total=Count('id'),
            completed=Count(Case(When(status='done', then=1), output_field=IntegerField())),
            in_progress=Count(Case(When(status='in_progress', then=1), output_field=IntegerField())),
            overdue=Count(
                Case(
                    When(status='todo', due_date__lt=now, then=1),
                    output_field=IntegerField()
                )
            ),
            todo=Count(
                Case(
                    When(status='todo', due_date__gte=now, then=1),
                    output_field=IntegerField()
                )
            ),
        )

        # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–¥–∞—á, Django –≤–µ—Ä–Ω—ë—Ç None –∑–∞–º–µ–Ω–∏–º –Ω–∞ 0
        return {k: (v or 0) for k, v in stats.items()}
    
    def get_weekly_data(self):

        now = timezone.now()

        week_ago = now - timedelta(days=7)

        print(f"üìÖ now = {now}")
        print(f"üìÖ week_ago = {week_ago}")

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
        daily_data = (
            Task.objects
            .filter(
                assignee=self.user,
                created_at__gte=week_ago
            )
            .annotate(day=TruncDate('created_at'))
            .values('day')
            .annotate(count=Count('id'))
            .order_by('day')
        )

        print("üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞ –Ω–µ–¥–µ–ª—é:")
        for item in daily_data:
            print(f"  –î–∞—Ç–∞: {item['day']}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item['count']}")

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        day_map = {now.date() - timedelta(days=i): 0 for i in range(7)}
        for item in daily_data:
            day_map[item['day']] = item['count']

        labels = [now.date() - timedelta(days=i) for i in range(6, -1, -1)]
        data = [day_map[day] for day in labels]

        print("üìä –§–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞:")
        print("Labels:", [day.strftime('%a') for day in labels])
        print("Data:", data)

        return {
            'labels': [day.strftime('%a') for day in labels],
            'data': data
        }