# notifications/factories.py
from abc import ABC, abstractmethod
from django.core.mail import send_mail
from django.conf import settings
from channels.layers import get_channel_layer
from asgiref.sync import async_to_sync
import json
from django.utils import timezone
import logging

logger = logging.getLogger(__name__)

# ------ –ü—Ä–æ–¥—É–∫—Ç ------
class Notification(ABC):
    @abstractmethod
    def send(self, recipient, message: str):
        pass

# ------ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã ------
class EmailNotification(Notification):
    def send(self, recipient, message: str):
        try:
            send_mail(
                subject="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç TaskFlow",
                message=message,
                html_message=f"<p>{message}</p>",
                from_email=settings.DEFAULT_FROM_EMAIL,
                recipient_list=[recipient],
                fail_silently=False,
            )
            logger.info(f"‚úÖ Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {recipient}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email –Ω–∞ {recipient}: {e}")

class WebSocketNotification(Notification):
    def send(self, recipient, message: str):
        """
        recipient ‚Äî —ç—Ç–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            channel_layer = get_channel_layer()
            if channel_layer is None:
                logger.warning("Channel layer –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å ASGI –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
                return

            async_to_sync(channel_layer.group_send)(
                f"user_{recipient}",
                {
                    "type": "send_notification",
                    "message": message,
                }
            )
            logger.info(f"üåê WebSocket: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ WebSocket-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient}: {e}")

# ------ –§–∞–±—Ä–∏–∫–∏ ------
class NotificationFactory(ABC):
    @abstractmethod
    def create_notification(self) -> Notification:
        pass

class EmailNotificationFactory(NotificationFactory):
    def create_notification(self) -> Notification:
        return EmailNotification()

class WebSocketNotificationFactory(NotificationFactory):
    def create_notification(self) -> Notification:
        return WebSocketNotification()