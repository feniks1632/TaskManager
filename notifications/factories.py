from abc import ABC, abstractmethod
from django.core.mail import send_mail
from django.conf import settings

# –ü—Ä–æ–¥—É–∫—Ç
class Notification(ABC):
    @abstractmethod
    def send(self, recipient, message: str):
        pass

class EmailNotification(Notification):
    def send(self, recipient, message: str):
        try:
            send_mail(
                subject="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç TaskFlow",
                message=message,
                html_message=f"<p>{message}</p><br><small>–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ TaskFlow</small>",
                from_email=settings.base.DEFAULT_FROM_EMAIL,
                recipient_list=[recipient],
                fail_silently=False,
            )
            print(f"‚úÖ Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {recipient}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email –Ω–∞ {recipient}: {e}")

class WebSocketNotification(Notification):
    def send(self, recipient, message: str):
        print(f"üåê –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ WebSocket –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient}: {message}")

# –§–∞–±—Ä–∏–∫–∏ 
class NotificationFactory(ABC):
    @abstractmethod
    def create_notification(self) -> Notification:
        pass

class EmailNotificationFactory(NotificationFactory):
    def create_notification(self) -> Notification:
        return EmailNotification()

class WebSocketNotificationFactory(NotificationFactory):
    def create_notification(self) -> Notification:
        return WebSocketNotification()